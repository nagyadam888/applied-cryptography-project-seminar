//
// Generated file, do not edit! Created by nedtool 5.6 from src/protocols/messages/Msg1.msg.
//

#ifndef __MSG1_M_H
#define __MSG1_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 struct paillier_ciphertext_t; typedef paillier_ciphertext_t* CipherBytes; 
// }}

/**
 * Class generated from <tt>src/protocols/messages/Msg1.msg:22</tt> by nedtool.
 * <pre>
 * packet Msg1
 * {
 *     CipherBytes encP[];
 *     unsigned long R[];
 *     string pubKey;
 * }
 * </pre>
 */
class Msg1 : public ::omnetpp::cPacket
{
  protected:
    CipherBytes *encP; // array ptr
    unsigned int encP_arraysize;
    unsigned long *R; // array ptr
    unsigned int R_arraysize;
    ::omnetpp::opp_string pubKey;

  private:
    void copy(const Msg1& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Msg1&);

  public:
    Msg1(const char *name=nullptr, short kind=0);
    Msg1(const Msg1& other);
    virtual ~Msg1();
    Msg1& operator=(const Msg1& other);
    virtual Msg1 *dup() const override {return new Msg1(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setEncPArraySize(unsigned int size);
    virtual unsigned int getEncPArraySize() const;
    virtual CipherBytes& getEncP(unsigned int k);
    virtual const CipherBytes& getEncP(unsigned int k) const {return const_cast<Msg1*>(this)->getEncP(k);}
    virtual void setEncP(unsigned int k, const CipherBytes& encP);
    virtual void setRArraySize(unsigned int size);
    virtual unsigned int getRArraySize() const;
    virtual unsigned long getR(unsigned int k) const;
    virtual void setR(unsigned int k, unsigned long R);
    virtual const char * getPubKey() const;
    virtual void setPubKey(const char * pubKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Msg1& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Msg1& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MSG1_M_H

