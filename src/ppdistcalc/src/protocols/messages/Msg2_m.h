//
// Generated file, do not edit! Created by nedtool 5.6 from src/protocols/messages/Msg2.msg.
//

#ifndef __MSG2_M_H
#define __MSG2_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 struct paillier_ciphertext_t; typedef paillier_ciphertext_t* CipherBytes; 
// }}

/**
 * Class generated from <tt>src/protocols/messages/Msg2.msg:21</tt> by nedtool.
 * <pre>
 * packet Msg2
 * {
 *     unsigned long R[];
 *     CipherBytes s1;
 *     unsigned long s2;
 * }
 * </pre>
 */
class Msg2 : public ::omnetpp::cPacket
{
  protected:
    unsigned long *R; // array ptr
    unsigned int R_arraysize;
    CipherBytes s1;
    unsigned long s2;

  private:
    void copy(const Msg2& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Msg2&);

  public:
    Msg2(const char *name=nullptr, short kind=0);
    Msg2(const Msg2& other);
    virtual ~Msg2();
    Msg2& operator=(const Msg2& other);
    virtual Msg2 *dup() const override {return new Msg2(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setRArraySize(unsigned int size);
    virtual unsigned int getRArraySize() const;
    virtual unsigned long getR(unsigned int k) const;
    virtual void setR(unsigned int k, unsigned long R);
    virtual CipherBytes& getS1();
    virtual const CipherBytes& getS1() const {return const_cast<Msg2*>(this)->getS1();}
    virtual void setS1(const CipherBytes& s1);
    virtual unsigned long getS2() const;
    virtual void setS2(unsigned long s2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Msg2& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Msg2& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MSG2_M_H

